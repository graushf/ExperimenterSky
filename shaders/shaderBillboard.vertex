#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texCoord;

out vec2 TexCoord;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 point_pos;
uniform vec3 camera_pos;
uniform vec3 camera_up;

uniform vec2 scaleBillboard;

void main()
{
	TexCoord = texCoord;

	vec3 look = camera_pos - point_pos;
	look = normalize(look);
	
	vec3 temp_up = normalize(camera_up);

	vec3 right = cross(temp_up, look);
	right = normalize(right);
	
	vec3 up = cross(look, right);
	up = normalize(up);

	mat4 rotBillboard; 
	rotBillboard[0][0] = right.x;
	rotBillboard[1][0] = up.x;
	rotBillboard[2][0] = look.x;
	rotBillboard[3][0] = point_pos.x;
	rotBillboard[0][1] = right.y;
	rotBillboard[1][1] = up.y;
	rotBillboard[2][1] = look.y;
	rotBillboard[3][1] = point_pos.y;
	rotBillboard[0][2] = right.z;
	rotBillboard[1][2] = up.z;
	rotBillboard[2][2] = look.z;
	rotBillboard[3][2] = point_pos.z;
	rotBillboard[0][3] = 0.0;
	rotBillboard[1][3] = 0.0;
	rotBillboard[2][3] = 0.0;
	rotBillboard[3][3] = 1.0;

	vec3 CameraRight_worldspace = vec3(view[0][0], view[1][0], view[2][0]);
	vec3 CameraUp_worldspace = vec3(view[0][1], view[1][1], view[2][1]);

	vec2 BillboardSize = scaleBillboard;

	vec3 vertexPosition_worldspace = point_pos + CameraRight_worldspace * position.x * BillboardSize.x + CameraUp_worldspace * position.y * BillboardSize.y;

	gl_Position = projection * view * vec4(vertexPosition_worldspace, 1.0); // BILLBOARD THAT WORKS BUT LOOKS WEIRD

	// Spherical billboarding
		mat4 modelView = inverse(view) * model;

		// First column
		modelView[0][0] = 1.0;
		modelView[0][1] = 0.0;
		modelView[0][2] = 0.0;

		// Second column
		modelView[1][0] = 0.0;
		modelView[1][1] = 1.0;
		modelView[1][2] = 0.0;

		// Third column
		modelView[2][0] = 0.0;
		modelView[2][1] = 0.0;
		modelView[2][2] = 1.0;

		//gl_Position = projection * modelView * vec4(position, 1.0);
}